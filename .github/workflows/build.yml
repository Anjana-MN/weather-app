# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]

env:
  REDIS_PORT: ${{ vars.REDIS_PORT }}
  APP_ID: ${{ secrets.APP_ID }}
  REDIS_PRIMARY_ENDPOINT: ${{ vars.REDIS_PRIMARY_ENDPOINT }}

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: --health-cmd="redis-server --version" --health-interval=10s --health-timeout=5s --health-retries=3  # Health check options for Redis

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Ensure gradlew is executable
      run: chmod +x gradlew

    - name: Debug environment variables
      run: |
        echo "Redis port: $REDIS_PORT"
        echo "APP ID: $APP_ID"
        echo "Redis Primary Endpoint: $REDIS_PRIMARY_ENDPOINT"

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      with:
        gradle-version: '8.9'
    
    - name: Build with Gradle 8.9
      run: gradle build

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure the deployment runs after the build job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Ensure gradlew is executable
        run: chmod +x gradlew

      - name: Build JAR with Gradle (again for deploy context)
        run: ./gradlew bootJar
        script: |
          echo ${{ secrets.EC2_KEY }}

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT || '22' }}
          source: build/libs/*.jar
          target: ~/springboot-app/

      - name: SSH into EC2 and restart app
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT || '22' }}
          script: |
            echo "Killing existing Spring Boot process if running..."
            pkill -f 'java -jar' || true
            echo "Starting new Spring Boot app..."
            nohup java -jar ~/springboot-app/*.jar > ~/springboot-app/app.log 2>&1 &