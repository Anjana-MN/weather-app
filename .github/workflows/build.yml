# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle and Deploy to EC2

on:
  push:
    branches: [ "master" ]

env:
  REDIS_PORT: ${{ vars.REDIS_PORT }}
  APP_ID: ${{ secrets.APP_ID }}
  REDIS_PRIMARY_ENDPOINT: ${{ vars.REDIS_PRIMARY_ENDPOINT }}
  EC2_KEY: ${{ secrets.EC2_KEY }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_HOST: ${{ secrets.EC2_HOST }}

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: --health-cmd="redis-server --version" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Ensure gradlew is executable
        run: chmod +x gradlew

      - name: Debug environment variables
        run: |
          echo "Redis port: $REDIS_PORT"
          echo "APP ID: $APP_ID"
          echo "Redis Primary Endpoint: $REDIS_PRIMARY_ENDPOINT"
          echo "EC2 KEY is set: ${{ secrets.EC2_KEY != '' }}"
          echo "EC2 USER: $EC2_USER"
          echo "EC2 HOST: $EC2_HOST"

      - name: Build JAR
        run: ./gradlew bootJar

      - name: Save JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: springboot-jar
          path: build/libs/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: springboot-jar

      - name: SSH into EC2 and remove old JARs
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT || '22' }}
          script: |
            echo "Cleaning up old JARs..."
            rm -f ~/springboot-app/*.jar   
            rm -f ~/springboot-app/app.log

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT || '22' }}
          source: "*.jar"
          target: "~/springboot-app/"

      - name: SSH into EC2 and restart Spring Boot app
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT || '22' }}
          script: |
            echo "Stopping existing Spring Boot process (if any)..."
            pkill -f 'java -jar' || true
            echo "Starting new Spring Boot app..."
            export APP_ID=TEST123
            export REDIS_PRIMARY_ENDPOINT=localhost
            nohup java -jar ~/springboot-app/*.jar > ~/springboot-app/app.log 2>&1 &
